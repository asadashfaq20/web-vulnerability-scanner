#!/usr/bin/env python3

import requests
from urllib.parse import urljoin
from bs4 import BeautifulSoup
from datetime import datetime


class Scanner:
    def __init__(self, url, ignore_links, is_report):
        self.session = requests.Session()
        self.target_url = url
        self.target_links = []
        self.links_to_ignore = ignore_links
        self.is_report = is_report
        self.logs = []

    def extract_links_from(self, url):
        links = list()
        response = self.session.get(url)
        parsed_html = BeautifulSoup(response.content, features="lxml")
        href_links = parsed_html.findAll("a")
        for link in href_links:
            links.append(link.get("href"))
        return links

    def crawl(self, url=None):
        if url == None:
            url = self.target_url
        href_links = self.extract_links_from(url)
        for link in href_links:
            link = urljoin(url, link)
            if "#" in link:
                link = link.split("#")[0]
            if self.target_url in link and link not in self.target_links and link not in self.links_to_ignore:
                self.target_links.append(link)
                self.logs.append(f"{link}\n")
                print(link)
                self.crawl(link)

    def extract_forms(self, url):
        response = self.session.get(url)
        parsed_html = BeautifulSoup(response.content, features="lxml")
        return parsed_html.findAll("form")

    def submit_form(self, form, value, url):
        action = form.get("action")
        post_url = urljoin(url, action)
        method = form.get("method")

        input_list = form.findAll("input")
        post_data = {}
        for inp in input_list:
            inp_name = inp.get('name')
            inp_type = inp.get('type')
            inp_value = inp.get("value")
            if inp_type == "text":
                inp_value = value
            post_data[inp_name] = inp_value

        textarea_list = form.findAll("textarea")
        for inp in textarea_list:
            inp_name = inp.get('name')
            inp_value = value
            post_data[inp_name] = inp_value

        if method == "post" or method == "POST":
            return self.session.post(post_url, data=post_data)
        return self.session.get(post_url, params=post_data)

    def run_scanner(self):
        for link in self.target_links:
            forms = self.extract_forms(link)
            for form in forms:
                print(f"[+] Testing form in {link}")
                is_vulnerable_to_xss = self.test_xss_in_form(form, link)
                if is_vulnerable_to_xss:
                    print(f"\n\n[***] XSS detected in {link} in the following form\n\n{form}\n\n")
                    self.logs.append(f"\n\n[***] XSS detected in {link} in the following form\n\n{form}\n\n")

            if "=" in link:
                print(f"[+] Testing {link}")
                is_vulnerable_to_xss = self.test_xss_in_link(link)
                if is_vulnerable_to_xss:
                    print(f"\n\n[***] Discovered XSS in {link}\n\n")
                    self.logs.append(f"\n\n[***] Discovered XSS in {link}\n\n")

        if self.is_report == 'Y' or self.is_report == 'y':
            self.generate_logs_report()

    def test_xss_in_form(self, form, url):
        xss_test_script = "<sCript>alert('test')</scriPt>"
        response = self.submit_form(form, xss_test_script, url)
        try:
            return bytes(xss_test_script, 'utf-8') in response.content
        except AttributeError:
            return False

    def test_xss_in_link(self, url):
        xss_test_script = "<sCript>alert('test')</scriPt>"
        url = url.replace("=", f"={xss_test_script}")
        response = self.session.get(url)
        try:
            return bytes(xss_test_script, 'utf-8') in response.content
        except AttributeError:
            return False

    def generate_logs_report(self):

        now = datetime.now()
        dt_string = now.strftime("%d%m%Y%H%M%S")
        f = open(f"wav_{dt_string}.txt", "w+")
        f.write("\nWeb Vulnerability Scanner Report/Logs\n")
        f.write("=======================================\n\n")
        for i in self.logs:
            f.write(i)
        f.close()
